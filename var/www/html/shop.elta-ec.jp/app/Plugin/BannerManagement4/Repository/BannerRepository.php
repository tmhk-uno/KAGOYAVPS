<?php

/*
 * This file is part of BannerManagement4
 *
 * Copyright(c) U-Mebius Inc. All Rights Reserved.
 *
 * https://umebius.com/
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Plugin\BannerManagement4\Repository;

use Eccube\Repository\AbstractRepository;
use Plugin\BannerManagement4\Entity\Banner;
use Plugin\BannerManagement4\Entity\BannerField;
use Symfony\Bridge\Doctrine\RegistryInterface;

/**
 * BannerRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BannerRepository extends AbstractRepository
{
    /**
     *  constructor.
     *
     * @param RegistryInterface $registry
     */
    public function __construct(
        RegistryInterface $registry
    ) {
        parent::__construct($registry, Banner::class);
    }

    /**
     * Banner の順位を1上げる.
     *
     * @param  \Plugin\BannerManagement4\Entity\Banner $Banner
     *
     * @return boolean 成功した場合 true
     */
    public function up(Banner $Banner)
    {
        $em = $this->getEntityManager();
        $em->getConnection()->beginTransaction();
        try {
            $Banners = $this->getBanners($Banner->getField());

            $index = array_search($Banner, $Banners, true);
            if ($index === false || $index < 1) {
                throw new \Exception();
            }

            $Banners[$index] = $Banners[$index - 1];
            $Banners[$index - 1] = $Banner;

            $this->updateRank($Banners);

            $em->persist($Banner);
            $em->flush();

            $em->getConnection()->commit();
        } catch (\Exception $e) {
            $em->getConnection()->rollback();

            return false;
        }

        return true;
    }

    /**
     * Banner の順位を1下げる
     *
     * @param  \Plugin\BannerManagement4\Entity\Banner $Banner
     *
     * @return boolean 成功した場合 true
     */
    public function down(Banner $Banner)
    {
        $em = $this->getEntityManager();
        $em->getConnection()->beginTransaction();
        try {
            $Banners = $this->getBanners($Banner->getField());

            $index = array_search($Banner, $Banners, true);

            unset($Banners[$index]);
            $Banners[] = $Banner;

            $this->updateRank($Banners);

            $em->persist($Banner);
            $em->flush();

            $em->getConnection()->commit();
        } catch (\Exception $e) {
            $em->getConnection()->rollback();

            return false;
        }

        return true;
    }

    /**
     * Banner を保存する.
     *
     * @param  \Plugin\BannerManagement4\Entity\Banner $Banner
     *
     * @return boolean 成功した場合 true
     */
    public function save($Banner)
    {
        $em = $this->getEntityManager();
        $em->getConnection()->beginTransaction();
        try {
            if (!$Banner->getId()) {
                $rank = $this->createQueryBuilder('n')
                    ->select('MAX(n.sort_no)')
                    ->getQuery()
                    ->getSingleScalarResult();
                if (!$rank) {
                    $rank = 0;
                }
                $Banner->setSortNo($rank + 1);
            }

            $em->persist($Banner);
            $em->flush();
            $em->getConnection()->commit();
        } catch (\Exception $e) {
            $em->getConnection()->rollback();

            return false;
        }

        return true;
    }

    /**
     * @param BannerField
     *
     * @return Banner[]
     */
    public function getBanners($BannerField, $onlyVisible = false)
    {
        $condition = ['Field' => $BannerField];
        if ($onlyVisible) {
            $condition['visible'] = true;
        }

        return $this->findBy(
            $condition,
            ['sort_no' => 'DESC', 'id' => 'DESC']
        );
    }

    /**
     * @param $Banners Banner[]
     */
    protected function updateRank($Banners)
    {
        $rank = 0;
        $Banners = array_reverse($Banners);
        foreach ($Banners as $Banner) {
            $Banner->setSortNo($rank++);
        }
    }

    /**
     * Banner を削除する.
     *
     * @param  \Plugin\BannerManagement4\Entity\Banner $Banner
     *
     * @return boolean 成功した場合 true
     */
    public function delete($Banner)
    {
        $em = $this->getEntityManager();
        $em->getConnection()->beginTransaction();
        try {
            $rank = $Banner->getSortNo();
            $em->createQueryBuilder()
                ->update('Plugin\BannerManagement4\Entity\Banner', 'n')
                ->set('n.sort_no', 'n.sort_no - 1')
                ->where('n.sort_no > :sort_no')->setParameter('sort_no', $rank)
                ->getQuery()
                ->execute();

            $em->remove($Banner);

            $Banners = $this->getBanners($Banner->getField());
            $this->updateRank($Banners);

            $em->flush();

            $em->getConnection()->commit();
        } catch (\Exception $e) {
            $em->getConnection()->rollback();

            return false;
        }

        return true;
    }

    /**
     * Banner の順位を一番上へ.
     *
     * @param  \Plugin\BannerManagement4\Entity\Banner $Banner
     *
     * @return boolean 成功した場合 true
     */
    public function top(Banner $Banner)
    {
        $em = $this->getEntityManager();
        $em->getConnection()->beginTransaction();
        try {
            $Banners = $this->getBanners($Banner->getField());

            $index = array_search($Banner, $Banners, true);
            if ($index === false || $index < 1) {
                throw new \Exception();
            }

            unset($Banners[$index - 1]);
            array_splice($Banners, 0, 0, [$Banner]);

            $this->updateRank($Banners);

            $em->persist($Banner);
            $em->flush();

            $em->getConnection()->commit();
        } catch (\Exception $e) {
            $em->getConnection()->rollback();

            return false;
        }

        return true;
    }

    /**
     * Banner の順位を一番下へ.
     *
     * @param  \Plugin\BannerManagement4\Entity\Banner $Banner
     *
     * @return boolean 成功した場合 true
     */
    public function last(Banner $Banner)
    {
        $em = $this->getEntityManager();
        $em->getConnection()->beginTransaction();
        try {
            $Banners = $this->getBanners($Banner->getField());

            $index = array_search($Banner, $Banners, true);

            unset($Banners[$index]);
            $Banners[] = $Banner;

            $this->updateRank($Banners);

            $em->persist($Banner);
            $em->flush();

            $em->getConnection()->commit();
        } catch (\Exception $e) {
            $em->getConnection()->rollback();
            return false;
        }

        return true;
    }
}
