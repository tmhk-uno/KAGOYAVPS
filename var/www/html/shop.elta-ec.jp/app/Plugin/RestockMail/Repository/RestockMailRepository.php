<?php

/*
 * This file is part of EC-CUBE
 *
 * Copyright(c) LOCKON CO.,LTD. All Rights Reserved.
 *
 * http://www.lockon.co.jp/
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Plugin\RestockMail\Repository;

use Doctrine\ORM\QueryBuilder;
use Eccube\Entity\Product;
use Eccube\Repository\AbstractRepository;
use Eccube\Util\StringUtil;
use Plugin\RestockMail\Entity\RestockMail;
use Symfony\Bridge\Doctrine\RegistryInterface;

/**
 * RestockMail.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RestockMailRepository extends AbstractRepository
{
    /**
     * RestockMailRepository constructor.
     *
     * @param RegistryInterface $registry
     */
    public function __construct(RegistryInterface $registry)
    {
        parent::__construct($registry, RestockMail::class);
    }

    /**
     * 検索条件での検索を行う。
     *
     * @param array $searchData
     *
     * @return QueryBuilder
     */
    public function getQueryBuilderBySearchData($searchData)
    {
        $qb = $this->createQueryBuilder('r')
            ->select('r, p, pc,cu')
            ->innerJoin('r.Product', 'p')
            ->innerJoin('p.ProductClasses', 'pc')
            ->innerJoin('r.Customer', 'cu');


        // 商品名
        if (isset($searchData['product_name']) && StringUtil::isNotBlank($searchData['product_name'])) {
            $qb
                ->andWhere('p.name LIKE :product_name')
                ->setParameter('product_name', '%'.str_replace('%', '\\%', $searchData['product_name']).'%');
        }

        // 商品コード
        if (isset($searchData['product_code']) && StringUtil::isNotBlank($searchData['product_code'])) {
            $qb
                ->andWhere('r.ProductCode = :code')
                ->setParameter('code', $searchData['product_code']);
        }

        // 顧客番号
        if (isset($searchData['customer']) && StringUtil::isNotBlank($searchData['customer'])) {
            $qb
                ->andWhere('cu.id = :customer_id')
            ->setParameter('customer_id',  $searchData['customer']);
        }



        // 登録日(開始)
        if (isset($searchData['review_start']) && !is_null($searchData['review_start'])) {
            $date = $searchData['review_start'];
            $qb
                ->andWhere('r.create_date >= :review_start')
                ->setParameter('review_start', $date);
        }

        // 登録日(終了)
        if (isset($searchData['review_end']) && !is_null($searchData['review_end'])) {
            $date = clone $searchData['review_end'];
            $date
                ->modify('+1 days');
            $qb
                ->andWhere('r.create_date < :review_end')
                ->setParameter('review_end', $date);
        }

        // 公開・非公開
        if (isset($searchData['status']) && !is_null($searchData['status']) &&
            count($searchData['status'] ) > 0) {
            $qb
                ->andWhere($qb->expr()->in('r.Status', ':Status'))
                ->setParameter('Status', $searchData['status']);
        }

        // Order By
        $qb->addOrderBy('r.id', 'DESC');

        return $qb;
    }

    /**
     * Get Avg and count.
     *
     * @param Product $Product
     *
     * @return mixed
     */
    public function getAvgAll(Product $Product)
    {
        $defaults = [
            'recommend_avg' => 0,
            'review_count' => 0,
        ];
        try {
            $qb = $this->createQueryBuilder('r')
                ->select('avg(r.recommend_level) as recommend_avg, count(r.id) as review_count')
                ->leftJoin('r.Product', 'p')
                ->where('r.Product = :Product')
                ->setParameter('Product', $Product)
                ->groupBy('r.Product');
		var_dump($qb->getQuery());
            return $qb->getQuery()->getSingleResult();
        } catch (\Exception $exception) {
            return $defaults;
        }
    }
}
