<?php

namespace Plugin\AdminSecurity4\Repository;

use Eccube\Doctrine\Query\Queries;
use Eccube\Repository\AbstractRepository;
use Eccube\Util\StringUtil;
use Plugin\AdminSecurity4\Entity\LoginRecord;
use Symfony\Bridge\Doctrine\RegistryInterface;

/**
 * LoginRecordRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class LoginRecordRepository extends AbstractRepository
{
    /**
     * @var Queries
     */
    private $queries;
    /**
     * ConfigRepository constructor.
     *
     * @param RegistryInterface $registry
     */
    public function __construct(
        RegistryInterface $registry,
        Queries $queries
    )
    {
        parent::__construct($registry, LoginRecord::class);
        $this->queries = $queries;
    }


    public function getQueryBuilderBySearchData($searchData)
    {
        $qb = $this->createQueryBuilder('c')
            ->select('c');

        if (isset($searchData['multi']) && StringUtil::isNotBlank($searchData['multi'])) {
            //スペース除去
            $clean_key_multi = preg_replace('/\s+|[　]+/u', '', $searchData['multi']);
            $qb
                ->andWhere('c.user_name LIKE :multi_key OR c.client_ip LIKE :multi_key')
                ->setParameter('multi_key', '%'.$clean_key_multi.'%')
                ->setParameter('multi_key', '%'.$clean_key_multi.'%');
        }

        if (isset($searchData['client_ip']) && StringUtil::isNotBlank($searchData['client_ip'])) {
            $qb
                ->andWhere('c.client_ip LIKE :client_ip')
                ->setParameter('client_ip', '%'.$searchData['client_ip'].'%');
        }

        if (isset($searchData['user_name']) && StringUtil::isNotBlank($searchData['user_name'])) {
            $qb
                ->andWhere('c.user_name LIKE :user_name')
                ->setParameter('user_name', '%'.$searchData['user_name'].'%');
        }

        // create_date
        if (!empty($searchData['create_date_start']) && $searchData['create_date_start']) {
            $qb
                ->andWhere('c.create_date >= :create_date_start')
                ->setParameter('create_date_start', $searchData['create_date_start']);
        }

        if (!empty($searchData['create_date_end']) && $searchData['create_date_end']) {
            $date = clone $searchData['create_date_end'];
            $date->modify('+1 days');
            $qb
                ->andWhere('c.create_date < :create_date_end')
                ->setParameter('create_date_end', $date);
        }

        // status
        if (!empty($searchData['status']) && count($searchData['status'])) {
            $qb
                ->andWhere($qb->expr()->in('c.success_flg', ':status'))
                ->setParameter('status', $searchData['status']);
        }

        // Order By
        $qb->addOrderBy('c.create_date', 'DESC');

        return $this->queries->customize('LoginRecord.getQueryBuilderBySearchData', $qb, $searchData);
    }

}